{"name":"Cachelicious","body":"Who said caching and serving cached files should be a chore? \r\n\r\nWith Cachelicious it's easier than baking a pie, and almost as delicious as eating it. Mmmmm, pie.... *drool*\r\n\r\n\r\nInstallation\r\n-----------\r\n\r\n    npm install cachelicious\r\n\r\n\r\nFS Cache Usage\r\n-----\r\n\r\n```js\r\nvar CacheliciousFs = require('cachelicious').fs;\r\nvar fsCache = new CacheliciousFs(20971520); //20MB of cache\r\n\r\nfsCache.createReadStream(filepath, options).pipe(destination1);\r\nfsCache.createReadStream(filepath, {start: 2, end: 100}).pipe(destination2);\r\n//both will stream from the same cache :)\r\n\r\n```\r\n\r\nStandalone HTTP Server Usage\r\n-----\r\n\r\n```js\r\nvar CacheliciousHttp = require('cachelicious').http;\r\n\r\n//create an HTTP cache server with 20MB to serve files from the assets directory\r\n(new CacheliciousHttp(20971520, __dirname + '/assets')).listen(9876);\t\r\n```\r\n\r\nConnect Middleware Usage\r\n-----\r\n\r\n```js\r\nvar connect = require('connect'),\r\n    cacheliciousConnect = require('cachelicious').connect,\r\n    http = require('http');\r\n\r\nvar app = connect()\r\n\t.use(cacheliciousConnect(__dirname + '/assets',  {maxCacheSize: 20971520}))\r\n\t.listen(3210);\r\n```\r\n\r\n\r\nSome test assets are included in the test/assets directory.\r\n\r\nYou can also try streaming video (and you should :D), like the Big Buck Bunny - http://www.bigbuckbunny.org/index.php/download/\r\n\r\nRanged HTTP requests are fully supported :)\r\n\r\nFast\r\n-----\r\n\r\n[APIB](http://code.google.com/p/apib/) results serving the 641KB file in the test assets, running on a 2011 MacBook Air i7 1.8GHz (initial status - cold cache):\r\n\r\n**Standlone HTTP server** *test/http.js*\r\n\r\n\tapib -d 30 -c 200 -K 2  http://127.0.0.1:9876/medium.jpg\r\n\r\n```\r\nDuration:             30.004 seconds\r\nAttempted requests:   53845\r\nSuccessful requests:  53845\r\nNon-200 results:      0\r\nConnections opened:   200\r\nSocket errors:        0\r\n\r\nThroughput:           1794.583 requests/second\r\nAverage latency:      111.210 milliseconds\r\nMinimum latency:      39.997 milliseconds\r\nMaximum latency:      243.020 milliseconds\r\nLatency std. dev:     12.224 milliseconds\r\n50% latency:          109.000 milliseconds\r\n90% latency:          124.159 milliseconds\r\n98% latency:          142.353 milliseconds\r\n99% latency:          148.804 milliseconds\r\n\r\nClient CPU average:    0%\r\nClient CPU max:        0%\r\nClient memory usage:    0%\r\n\r\nTotal bytes sent:      3.71 megabytes\r\nTotal bytes received:  33792.17 megabytes\r\nSend bandwidth:        0.99 megabits / second\r\nReceive bandwidth:     9009.99 megabits / second\r\n```\r\n\r\n**Cachelicious Connect Middleware** *test/connect.js*\r\n\t\r\n\tapib -d 30 -c 200 -K 2  http://127.0.0.1:3210/medium.jpg\r\n\r\n```\r\nDuration:             30.004 seconds\r\nAttempted requests:   49598\r\nSuccessful requests:  49598\r\nNon-200 results:      0\r\nConnections opened:   200\r\nSocket errors:        0\r\n\r\nThroughput:           1653.028 requests/second\r\nAverage latency:      120.535 milliseconds\r\nMinimum latency:      46.361 milliseconds\r\nMaximum latency:      572.141 milliseconds\r\nLatency std. dev:     31.452 milliseconds\r\n50% latency:          115.357 milliseconds\r\n90% latency:          137.229 milliseconds\r\n98% latency:          161.885 milliseconds\r\n99% latency:          194.394 milliseconds\r\n\r\nClient CPU average:    0%\r\nClient CPU max:        0%\r\nClient memory usage:    0%\r\n\r\nTotal bytes sent:      3.42 megabytes\r\nTotal bytes received:  31150.77 megabytes\r\nSend bandwidth:        0.91 megabits / second\r\nReceive bandwidth:     8305.67 megabits / second\r\n```\r\n\r\n**Static + Static Cache Connect Middleware** *test/connectStatic.js*\r\n\r\n\tapib -d 30 -c 200 -K 2  http://127.0.0.1:4321/medium.jpg\r\n\r\n```\r\nDuration:             30.004 seconds\r\nAttempted requests:   15000\r\nSuccessful requests:  15000\r\nNon-200 results:      0\r\nConnections opened:   200\r\nSocket errors:        0\r\n\r\nThroughput:           499.940 requests/second\r\nAverage latency:      398.803 milliseconds\r\nMinimum latency:      371.709 milliseconds\r\nMaximum latency:      525.252 milliseconds\r\nLatency std. dev:     24.629 milliseconds\r\n50% latency:          390.023 milliseconds\r\n90% latency:          431.956 milliseconds\r\n98% latency:          475.991 milliseconds\r\n99% latency:          505.020 milliseconds\r\n\r\nClient CPU average:    0%\r\nClient CPU max:        0%\r\nClient memory usage:    0%\r\n\r\nTotal bytes sent:      1.04 megabytes\r\nTotal bytes received:  9410.90 megabytes\r\nSend bandwidth:        0.28 megabits / second\r\nReceive bandwidth:     2509.27 megabits / second\r\n```\r\n\r\n\r\nLicense\r\n-----\r\n\r\n[New BSD License](https://github.com/cblage/node-cachelicious/blob/master/LICENSE) \r\n\r\n\r\nContributing\r\n------------\r\n\r\nPull requests are welcome! I'll try to merge all valuable contributions and credit the author when I do so.","tagline":"Delicious Node.js file stream cacher and HTTP cache server","google":"UA-721334-5","note":"Don't delete this file! It's used internally to help with page regeneration."}